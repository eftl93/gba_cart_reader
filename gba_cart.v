
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module gba_cart(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// CapSense Button //////////
	inout 		          		CAP_SENSE_I2C_SCL,
	inout 		          		CAP_SENSE_I2C_SDA,

	//////////// Audio //////////
	inout 		          		AUDIO_BCLK,
	output		          		AUDIO_DIN_MFP1,
	input 		          		AUDIO_DOUT_MFP2,
	inout 		          		AUDIO_GPIO_MFP5,
	output		          		AUDIO_MCLK,
	input 		          		AUDIO_MISO_MFP4,
	inout 		          		AUDIO_RESET_n,
	output		          		AUDIO_SCL_SS_n,
	output		          		AUDIO_SCLK_MFP3,
	inout 		          		AUDIO_SDA_MOSI,
	output		          		AUDIO_SPI_SELECT,
	inout 		          		AUDIO_WCLK,

	//////////// HDMI-TX //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		     [3:0]		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_DE,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// MicroSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	output		          		SD_CMD_DIR,
	output		          		SD_D0_DIR,
	inout 		          		SD_D123_DIR,
	inout 		     [3:0]		SD_DAT,
	input 		          		SD_FB_CLK,
	output		          		SD_SEL,

	//////////// SW //////////
	input 		     [1:0]		SW,

	//////////// USB //////////
	input 		          		USB_CLKIN,
	output		          		USB_CS,
	inout 		     [7:0]		USB_DATA,
	input 		          		USB_DIR,
	input 		          		USB_FAULT_n,
	input 		          		USB_NXT,
	output		          		USB_RESET_n,
	output		          		USB_STP,

	//////////// BBB Conector //////////
	input 		          		BBB_PWR_BUT,
	input 		          		BBB_SYS_RESET_n,
	inout 		    [43:32]		GPIO0_D,
	inout 		    [22:0]		GPIO1_D,
	inout				 [23:0]     AD,
	output                     nWR,
	output							CLK_GBA,
	output							nRD,
	output							nCS,
	input								nIRQ,
	output							nCS2,
	input								GPIO0_D2,
	input								GPIO0_D7
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk_1Hz;
wire clk_1MHz;
wire [1:0]button;
wire reset;
//reg  [7:0]counter = 0;
wire data_ready;
wire [23:0] current_address;
wire out_en;
reg	[15:0] rom_data;


//=======================================================
//  Structural coding
//=======================================================

assign reset 		= button[0] | button[1];
assign LED[7:0]	= current_address[7:0];


assign AD[23:0] = (out_en ? current_address : {24{1'bz}});

always @(posedge data_ready)
begin
	rom_data[15:0] = AD[15:0];
end


debouncer		u0(.bouncing(KEY[0]), .clk(MAX10_CLK1_50), .debounced(button[0]));
debouncer		u1(.bouncing(KEY[1]), .clk(MAX10_CLK1_50), .debounced(button[1]));

clock_divider  #(.DIVISOR(26'd25000000)) u2(.clk_in(MAX10_CLK1_50), .n_reset(reset), .clk_out(clk_1Hz));
clock_divider	#(.DIVISOR(26'd25))		  u3(.clk_in(MAX10_CLK1_50), .n_reset(reset), .clk_out(clk_1MHz));

dump_fsm #(.N(3'd7), .DELAYED_CYCLES(7'd100), .MAX_ADDR(24'hFFFFFF))
						u4(.clk(clk_1MHz),
					  .start_dump(KEY[0]),
					  .n_reset(reset),
					  .n_rd(nRD),
					  .n_wr(nWR),
					  .n_cs(nCS),
					  .n_cs2(nCS2),
					  .out_en(out_en),
					  .out_done(GPIO1_D[1]),
					  .current_address(current_address),
					  .data_ready(data_ready)
					  );
					  


//always @(posedge clk_1Hz, negedge reset)
//if (!reset)
//	counter <= 8'b0;
//else
//	counter <= counter + 1'b1;
//assign LED = ~counter;


endmodule
